======================
Source code for step 5
======================

Contents of models/services/blog_record.py::

    import sqlalchemy as sa
    from paginate_sqlalchemy import SqlalchemyOrmPage #<- provides pagination
    from ..meta import DBSession
    from ..blog_record import BlogRecord

    class BlogRecordService(object):

        @classmethod
        def all(cls):
            return DBSession.query(BlogRecord).order_by(sa.desc(BlogRecord.created))

        @classmethod
        def by_id(cls, id):
            return DBSession.query(BlogRecord).filter(BlogRecord.id == id).first()

        @classmethod
        def get_paginator(cls, request, page=1):
            query = DBSession.query(BlogRecord).order_by(sa.desc(BlogRecord.created))
            query_params = request.GET.mixed()

            def url_maker(link_page):
                # replace page param with values generated by paginator
                query_params['page'] = link_page
                return request.current_route_url(_query=query_params)

            return SqlalchemyOrmPage(query, page, items_per_page=5,
                                     url_maker=url_maker)


Contents of models/blog_record.py::

    import datetime #<- will be used to set default dates on models
    from pyramid_blogr.models.meta import Base  #<- we need to import our sqlalchemy metadata for model classes to inherit from
    from sqlalchemy import (
        Column,
        Integer,
        Unicode,     #<- will provide unicode field,
        UnicodeText, #<- will provide unicode text field,
        DateTime     #<- time abstraction field,
    )
    from webhelpers2.text import urlify #<- will generate slugs
    from webhelpers2.date import distance_of_time_in_words #<- human friendly dates

    class BlogRecord(Base):
        __tablename__ = 'entries'
    id = Column(Integer, primary_key=True)
        title = Column(Unicode(255), unique=True, nullable=False)
        body = Column(UnicodeText, default=u'')
        created = Column(DateTime, default=datetime.datetime.utcnow)
        edited = Column(DateTime, default=datetime.datetime.utcnow)

        @property
        def slug(self):
            return urlify(self.title)

        @property
        def created_in_words(self):
            return distance_of_time_in_words(self.created, datetime.datetime.utcnow())



Contents of views/default.py::

    from pyramid.view import view_config
    from ..models.services.blog_record import BlogRecordService

    @view_config(route_name='home', renderer='pyramid_blogr:templates/index.mako')
    def index_page(request):
        page = int(request.params.get('page', 1))
        paginator = BlogRecordService.get_paginator(request, page)
        return {'paginator': paginator}

    @view_config(route_name='auth', match_param='action=in', renderer='string',
                 request_method='POST')
    @view_config(route_name='auth', match_param='action=out', renderer='string')
    def sign_in_out(request):
        return {}


Contents of views/blog.py::

    from pyramid.view import view_config
    from pyramid.httpexceptions import HTTPNotFound, HTTPFound
    from ..models.meta import DBSession
    from ..models.blog_record import BlogRecord
    from ..models.services.blog_record import BlogRecordService

    @view_config(route_name='blog', renderer='pyramid_blogr:templates/view_blog.mako')
    def blog_view(request):
        blog_id = int(request.matchdict.get('id', -1))
        entry = BlogRecordService.by_id(blog_id)
        if not entry:
            return HTTPNotFound()
        return {'entry': entry}

    @view_config(route_name='blog_action', match_param='action=create',
                 renderer='pyramid_blogr:templates/edit_blog.mako')
    def blog_create(request):
        return {}

    @view_config(route_name='blog_action', match_param='action=edit',
                 renderer='pyramid_blogr:templates/edit_blog.mako')
    def blog_update(request):
        return {}


